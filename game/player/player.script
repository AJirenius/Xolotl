local config  = require "main.config"
local gop = require "utils.gop"
local sound = require "main.sound"
go.property("music_taste", hash("music1"))
go.property("has_shadow", 1)



local function play_anim(self, anim)
	if self.current_anim == anim then return end
	
	self.current_anim = anim
	msg.post("#sprite", "play_animation", { id = hash(anim) })
end

local function flip_horizontal(self, flag)
	self.is_flipped = flag
	sprite.set_hflip("#sprite", self.is_flipped)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.move_input = vmath.vector3(0,0,0)
	self.velocity = vmath.vector3(0,0,0)
	self.correction = vmath.vector3(0,0,0)
	self.shadow = msg.url("/shadow") 
	self.shadow_gop = gop.get_properties(self.shadow)
	self.gop = gop.get_properties()
	self.vertical_contact = 0
	self.is_teleporting = false
	self.walk_timer = 0
	play_anim(self, "idle")
	sound.play_music(self.music_taste)
	sound.stop_all_sound()
end

local function show_game_over(self)
	sound.stop_all_sound()
	msg.post("main:/start_screen", "set_state", { state = 2 })
end

local function update_reset(self)
	self.move_input = vmath.vector3(0,0,0)
	self.correction = vmath.vector3(0,0,0)
	self.vertical_contact = 0
end

local function update_movement(self, dt)
	
	-- horizontal speed
    local h_speed = self.move_input.x * config.PLAYER_MAX_SPEED -- -1 or 1
    local speed_diff = h_speed - self.velocity.x
    local acceleration = vmath.vector3(0, 0, 0)
   	acceleration.y = -config.GRAVITY
    if speed_diff ~= 0 then -- if speed_diff is 0 then no changes should be done, right?
        if speed_diff < 0 then
            acceleration.x = -config.PLAYER_ACCELERATION
        else
            acceleration.x = config.PLAYER_ACCELERATION
        end
        if not self.ground_contact then
            acceleration.x = config.AIR_FRICTION * acceleration.x
        end
    end
    -- calculate the velocity change this frame (dv is short for delta-velocity)
    local dv = acceleration * dt
    -- check if dv exceeds the intended speed difference, clamp it in that case
    if math.abs(dv.x) > math.abs(speed_diff) then
        dv.x = speed_diff
    end
    -- save the current velocity for later use
    -- (self.velocity, which right now is the velocity used the previous frame)
    local v0 = self.velocity
    -- calculate the new velocity by adding the velocity change
    self.velocity = self.velocity + dv
    
    if self.velocity.y > config.PLAYER_MAX_FALL_SPEED then self.velocity.y = config.PLAYER_MAX_FALL_SPEED end
    
    -- calculate the translation this frame by integrating the velocity
    local dp = (v0 + self.velocity) * dt * 0.5
    -- apply it to the player character
    go.set_position(go.get_position() + dp)
end

local function update_animation(self)
	if self.velocity.x ~= 0 then
		if self.vertical_contact == 1 then
			play_anim(self, "run")
		end
	else
		if self.vertical_contact == 1 then
			play_anim(self, "idle")
		end
	end
end

function update_sound(self, dt)
	self.walk_timer = self.walk_timer - dt
	if self.walk_timer < 0 and self.vertical_contact == 1 and math.abs(self.velocity.x) > 2 then
		sound.play("step")
		self.walk_timer = config.STEP_SOUND_TIME
	end
end

function update(self, dt)
	
	if self.is_teleporting == true or self.is_dead == true or self.is_complete == true then return end
	update_animation(self)
	update_sound(self, dt)
	update_movement(self, dt)
    update_reset(self)
end

local function fall_death(self)
	if self.is_dead == true then return end
	self.is_dead = true
	factory.create("/factories#instant_fx", go.get_position(), nil, { fx = msg.url("#blood_splatter")})
	play_anim(self, "fall_death")
	sound.play("high_fall")
	go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5, 0, function() 
		sound.play_music("game_over")
		
		go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1.5, 0, show_game_over)
	end)
end

local function handle_contact(self, normal, distance)
	
	
	if self.is_dead == true then return end
	local proj = vmath.dot(self.correction, normal)
    local comp = (distance - proj) * normal
    self.correction = self.correction + comp
    go.set_position(go.get_position() + comp)
    if normal.y > 0.7 then
    	-- player is standing 
    	self.vertical_contact = 1
    end
    
   
	if self.velocity.y < -config.PLAYER_DEATH_FALL_SPEED and normal.y > 0.7 then
		fall_death(self)
	end
	
    
    
    proj = vmath.dot(self.velocity, normal)
    -- if the projection is negative, it means that some of the velocity points towards the contact point
    if proj < 0 then
        self.velocity = self.velocity - proj * normal
    end
    
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then 
		if message.group == hash("lethal") then
			fall_death(self)
		else
			handle_contact(self, message.normal, message.distance)
		end
	end 
	if message_id == hash("level_complete") then
		self.is_complete = true
		play_anim(self, "teleport")
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, go.get_position(sender), go.EASING_INOUTSINE, 0.7)
		go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, 0.01, go.EASING_INBACK, 0.7, 0, function()
			msg.post(".", "disable")
		end)
	end
end
local function jump(self)
	if self.vertical_contact == 1 then
		self.velocity.y = config.JUMP_ACCELERATION
		self.vertical_contact = 0
		play_anim(self, "jump")
		sound.play("jump")
	end
end

local function abort_jump(self)
	if self.velocity.y > 0 then -- if its going up
		self.velocity.y = self.velocity.y * 0.3
	end
end

local function teleport(self)
	if self.has_shadow == 1 then
		local ppos = go.get_position()
		local spos = go.get_position(self.shadow)
		
		local fx_pos = vmath.vector3(ppos)
		fx_pos.y = fx_pos.y +20
		factory.create("/factories#instant_fx", fx_pos)
		play_anim(self, "teleport")
		self.is_teleporting = true
		sound.play("teleport")
		go.set_scale(1)
		go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, 0.1, go.EASING_INBACK, 0.45, 0, function()
			go.set_scale(1)
			self.is_teleporting = false
			play_anim(self, "idle")
			go.set_position(spos)
			go.set_position(ppos, self.shadow)
			self.velocity = vmath.vector3()
		end)
	end
end

function on_input(self, action_id, action)
	if self.is_dead == true then return end
	if action_id == hash("up") then
		
	elseif action_id == hash("teleport") and action.pressed == true then
		if self.shadow_gop.enabled == true then teleport(self) end
	end
	if action_id == hash("left") then
		self.move_input.x = -1
		flip_horizontal(self, true)
	elseif action_id == hash("right") then
		self.move_input.x = 1
		flip_horizontal(self, false)
	end
	if action_id == hash("jump") then
		if action.pressed == true then 
			jump(self)
		elseif action.released == true then
			abort_jump(self)
		end
	end
	if action_id == hash("fire") and action.pressed == true then
		--[[
		local pos = go.get_position()
		local direction = 1
		if self.is_flipped == true then direction = -1 end
		pos.x = pos.x + 20 * direction
		pos.y = pos.y + 25
		factory.create("/factories#arrow", pos, nil, { direction = direction } )
		--]]
	end
end
